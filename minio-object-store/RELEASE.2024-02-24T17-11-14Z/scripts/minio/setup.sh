#!/bin/bash

run_minio_setup() {
    is_running

    log "Executando configura√ß√£o inicial do MinIO..."

    $DOCKER_COMPOSE exec -T $SERVICE_NAME /bin/sh -c "
        $(print_setup_banner)
        $(print_config_check)
        $(verify_mc_client)
        $(configure_alias)
        $(configure_security_policies)
        $(create_buckets)
        $(configure_cors)
        $(set_api_limits)
        $(restart_minio_service)
        $(print_setup_summary)
    "

    if [ $? -eq 0 ]; then
        log "‚úì Configura√ß√£o do MinIO conclu√≠da com sucesso!"
        info "Aguarde alguns segundos para o servi√ßo reiniciar"
        sleep 5
    else
        error "‚úó Falha na configura√ß√£o do MinIO"
        exit 1
    fi
}

# üß© Fun√ß√µes de responsabilidade √∫nica:

print_setup_banner() {
cat <<'EOF'
echo '============================================='
echo 'üöÄ  INICIANDO CONFIGURA√á√ÉO COMPLETA MINIO  '
echo '============================================='
EOF
}

print_config_check() {
cat <<EOF
echo 'üìã [ETAPA 1/8] Verificando configura√ß√µes...'
echo "  MINIO_ROOT_USER: ${MINIO_ROOT_USER}"
echo '‚úì Configura√ß√µes verificadas'
EOF
}

verify_mc_client() {
cat <<'EOF'
echo 'üîç [ETAPA 2/8] Verificando cliente mc...'
if ! command -v mc >/dev/null 2>&1; then
    echo '‚ùå Cliente mc n√£o encontrado no container'
    exit 1
fi
echo '‚úì Cliente mc dispon√≠vel'
EOF
}

configure_alias() {
cat <<EOF
echo 'üîó [ETAPA 3/8] Configurando alias do MinIO...'
mc alias set local http://localhost:${MINIO_API_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
echo '‚úì Alias configurado'
EOF
}

configure_security_policies() {
cat <<'EOF'
echo 'üõ°Ô∏è [ETAPA 4/8] Configurando pol√≠ticas de seguran√ßa...'
mc admin config set local/ browser csp_policy="default-src 'self' 'unsafe-inline' data:; font-src 'self' 'unsafe-inline' data: https://use.typekit.net https://fonts.googleapis.com https://fonts.gstatic.com; connect-src 'self' https://dl.min.io https://unpkg.com wss:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; script-src 'self' 'unsafe-inline' 'unsafe-eval';"
echo '‚úì Pol√≠ticas configuradas'
EOF
}

create_buckets() {
cat <<'EOF'
echo 'üì¶ [ETAPA 5/8] Criando buckets...'
mc mb local/public 2>/dev/null && echo '‚úì Bucket p√∫blico criado' || echo '‚Ñπ Bucket j√° existe'
EOF
}

configure_cors() {
cat <<EOF
echo 'üåê [ETAPA 6/8] Configurando CORS...'
mc admin config set local/ api cors_allow_origin="${MINIO_API_CORS_ALLOW_ORIGIN}"
echo '‚úì CORS habilitado'
EOF
}

set_api_limits() {
cat <<EOF
echo '‚ö° [ETAPA 7/8] Configurando limite de API...'
mc admin config set local/ api requests_max=${MINIO_API_REQUESTS_MAX}
echo '‚úì Limite de requisi√ß√µes configurado'
EOF
}

restart_minio_service() {
cat <<'EOF'
echo 'üîÑ [ETAPA 8/8] Reiniciando servi√ßo...'
if mc admin service restart local --json >/dev/null 2>&1; then
    echo '‚úì Servi√ßo reiniciado'
else
    echo '‚ö† Falha ao reiniciar servi√ßo automaticamente'
fi
EOF
}

print_setup_summary() {
cat <<EOF
echo '============================================='
echo '‚úÖ  CONFIGURA√á√ÉO COMPLETA FINALIZADA!'
echo '============================================='
echo "üìã Resumo:"
echo "  ‚Ä¢ Root User: ${MINIO_ROOT_USER}"
echo "  ‚Ä¢ Bucket: local/public"
echo "  ‚Ä¢ CORS: ${MINIO_API_CORS_ALLOW_ORIGIN}"
echo "  ‚Ä¢ CSP: OK"
echo "  ‚Ä¢ Max Requests: ${MINIO_API_REQUESTS_MAX}"
EOF
}
